workflow:
  name: advanced_pipeline_generator
  description: Intelligent pipeline generator with validation, optimization, and iterative improvement
  version: "2.0.0"

  parameters:
    pipeline_request: 
      type: string
      description: "Description of the desired pipeline functionality"
    
  steps:
  - name: analyze_requirements
    type: claude
    claude_options:
      max_turns: 1
    prompt:
      - type: "static"
        content: |
          Analyze the pipeline request: "{{pipeline_request}}"
          
          Extract and identify:
          1. Core functionality requirements
          2. Input/output data types
          3. Required processing steps
          4. Error handling needs
          5. Performance considerations
          6. Integration requirements
          
          Return JSON with extracted requirements.

  - name: design_architecture
    type: claude
    claude_options:
      max_turns: 1
    prompt:
      - type: "static"
        content: |
          Based on requirements: {{analyze_requirements.output}}
          
          Design optimal pipeline architecture including:
          - Step sequencing and dependencies
          - Error handling strategy
          - Validation checkpoints
          - Parallel processing opportunities
          - Resource optimization
          - Monitoring points
          
          Return architectural design as structured JSON.

  - name: generate_pipeline
    type: claude
    claude_options:
      max_turns: 1
      system_prompt: "You are an expert pipeline architect. Generate production-ready YAML configurations with comprehensive error handling, validation, and monitoring."
    prompt:
      - type: "static"
        content: |
          Requirements: {{analyze_requirements.output}}
          Architecture: {{design_architecture.output}}
          
          Generate a complete, production-ready YAML pipeline that includes:
          - Comprehensive input validation
          - Multi-step error handling
          - Progress monitoring
          - Result validation
          - Performance optimization
          - Clear step naming and documentation
          
          Use advanced step types: claude, transform, validate, conditional, parallel where appropriate.
          
          Return only the YAML configuration.

  - name: validate_pipeline
    type: claude
    claude_options:
      max_turns: 1
    prompt:
      - type: "static"
        content: |
          Review the generated pipeline: {{generate_pipeline.output}}
          
          Validate for:
          - YAML syntax correctness
          - Step type compatibility
          - Parameter consistency
          - Error handling completeness
          - Performance bottlenecks
          - Security considerations
          
          If issues found, provide specific corrections. If valid, confirm readiness.

  - name: optimize_pipeline
    type: claude
    claude_options:
      max_turns: 1
    prompt:
      - type: "static"
        content: |
          Original pipeline: {{generate_pipeline.output}}
          Validation results: {{validate_pipeline.output}}
          
          Optimize the pipeline for:
          - Execution efficiency
          - Resource utilization
          - Error resilience
          - Maintainability
          - Scalability
          
          Return the final optimized YAML pipeline configuration.

  - name: generate_documentation
    type: claude
    claude_options:
      max_turns: 1
    prompt:
      - type: "static"
        content: |
          Pipeline: {{optimize_pipeline.output}}
          Requirements: {{analyze_requirements.output}}
          
          Generate comprehensive documentation including:
          - Pipeline purpose and capabilities
          - Input/output specifications
          - Usage examples
          - Configuration options
          - Troubleshooting guide
          
          Format as markdown.

  outputs:
    pipeline_yaml: "{{optimize_pipeline.output}}"
    documentation: "{{generate_documentation.output}}"
    requirements_analysis: "{{analyze_requirements.output}}"
    architecture_design: "{{design_architecture.output}}"
    validation_report: "{{validate_pipeline.output}}"